{"version":3,"sources":["logo.svg","components/Lng/LngSupport.js","components/Lng/Lng.js","components/LngMenu/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","en","id","name","autouse","disabled","hidden","ru","ua","Language","Text","key","LinkLearnReact","LngMenu","this","props","AppState","AppSetState","className","LngMenuShow","Lng","defaultValue","LngCurrent","onChange","event","target","value","size","LngMenuOptions","Component","App","state","LngDefault","lngInit","hasOwnProperty","LngUser","navigator","language","substr","userLanguage","LngSupport","LngOptions","push","lngLoad","Object","assign","console","log","setState","src","logo","alt","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91331c4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default {\r\n    // enter language code in ISO 639-1 format (en, ru, ua ...)\r\n    // - id - need for React, used like 'key'\r\n    // - name - language display name\r\n    // - autouse - auto load on start React app\r\n    // - disabled - disabled language in dropdown menu\r\n    // - hidden - hidden language in dropdown menu\r\n    en: {id: 1, name: \"English\", autouse: true, disabled: false, hidden: false}, \r\n    ru: {id: 2, name: \"Русский\", autouse: true, disabled: false, hidden: false}, \r\n    ua: {id: 3, name: \"Українська\", autouse: true, disabled: false, hidden: false},};","import React from 'react';\r\n// you need import 'react'!!!\r\n// for supporting use massive, like in 'Text' propertie\r\n\r\n// in App.js 'state.LngDefault' use 'en'\r\n// if you, for example comment propertie 'Text' in 'ru' or 'ua' language\r\n// 'Text' propertie will be loaded from 'en' language\r\nexport default {\r\nen: {\r\n    Language: \"Language:\",\r\n    Text: [\"Edit \",<code key=\"1\">src/App.js</code>,\" and save to reload.\"],\r\n    LinkLearnReact: \"Learn React\",},    \r\nru: {\r\n    Language: \"Язык:\",\r\n    Text: [\"Отредактируйте \",<code key=\"1\">src/App.js</code>,\" и сохраните для перезагрузки.\"],\r\n    LinkLearnReact: \"Учить React\",},\r\nua: {\r\n    Language: \"Мова:\",\r\n    Text: [\"Відредагуйте \",<code key=\"1\">src/App.js</code>,\" та збережіть для перезавантаження.\"],\r\n    LinkLearnReact: \"Вчити React\",},\r\n};\r\n","import React, { Component } from 'react';\r\nimport './index.css';\r\n\r\nexport default class LngMenu extends Component {\r\n\r\n    render() {\r\n        const { AppState, AppSetState } = this.props;\r\n\r\n        return(\r\n            <div className=\"LngMenu\">\r\n                    {AppState.LngMenuShow &&\r\n                    <div className=\"LngMenu-lang-menu\">\r\n                        <span className=\"LngMenu-lang-span\">{AppState.Lng.Language}</span>\r\n                        <select className=\"LngMenu-lang-selector\" defaultValue={AppState.LngCurrent} onChange={(event) => {AppSetState({LngCurrent: event.target.value,})}} size=\"1\">\r\n                            {AppState.LngMenuOptions}\r\n                        </select>\r\n                    </div>}\r\n            </div>\r\n        );\r\n    };\r\n};","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport LngSupport from './components/Lng/LngSupport.js';\nimport Lng from './components/Lng/Lng.js';\nimport LngMenu from './components/LngMenu';\n\nclass App extends Component {\n\n  state = {\n    // default language use for filling gaps\n    // in other languages\n    LngDefault: \"en\",\n    // current language its loaded if browser\n    // language not supported (on load app)\n    LngCurrent: \"en\",\n    // if you need you can hide (set false) language menu\n    LngMenuShow: true,\n  };\n\n  // initialization language parameters\n  lngInit = (AppState) => {\n      if (!AppState.hasOwnProperty(\"LngUser\")) {\n          // writte in 'LngUser' browser language in ISO 639-1 format (en, ru, ua .....)\n          AppState.LngUser = navigator.language.substr(0, 2) || navigator.userLanguage.substr(0, 2);\n          if (LngSupport.hasOwnProperty(AppState.LngUser)) {\n              if (LngSupport[AppState.LngUser].autouse) {\n                AppState.LngCurrent = AppState.LngUser;\n              };\n          };\n      };\n      if (!AppState.hasOwnProperty(\"LngMenuOptions\")) {\n        // create language drop-down menu options\n        const LngOptions = [];\n\n        for (var key in LngSupport) {\n            LngOptions.push(\n                <option className=\"LngMenu-lang-option\" key={LngSupport[key].id} disabled={LngSupport[key].disabled} hidden={LngSupport[key].hidden} value={key}>{LngSupport[key].name}</option>\n            );\n        }\n\n        AppState.LngMenuOptions = LngOptions;\n      };\n  };\n\n  // create/update 'Lng' in state from 'Lng.js'\n  lngLoad = (AppState) => {\n      if (Lng.hasOwnProperty(AppState.LngDefault)) {\n          if (Lng.hasOwnProperty(AppState.LngCurrent)) {\n            AppState.Lng = Object.assign({}, Lng[AppState.LngDefault], Lng[AppState.LngCurrent]);\n          } else {console.log(\"App-lngLoad()\", \" : '\"+AppState.LngCurrent+\" (LngCurrent)' not found in Lng.js!\")};\n      } else {console.log(\"App-lngLoad()\", \" : '\"+AppState.LngDefault+\" (LngDefault)' not found in Lng.js!\")};     \n  };\n\n  AppSetState = (value) => {\n    this.setState(value);\n  };\n\n  render() {\n    const AppState = this.state;\n    // initialization language parameters\n    this.lngInit(AppState);\n    // create/update 'Lng' in state from 'Lng.js'\n    this.lngLoad(AppState);\n    // now in this.state.Lng loaded properties from 'Lng.js'\n    // in context this.state.LngCurrent properties (example: ru)\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <LngMenu AppState={AppState} AppSetState={this.AppSetState} />\n          <p>\n            {AppState.Lng.Text}\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {AppState.Lng.LinkLearnReact}\n          </a>\n        </header>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}